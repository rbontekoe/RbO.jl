var documenterSearchIndex = {"docs":
[{"location":"module_d/#Examples-1","page":"Appendix","title":"Examples","text":"","category":"section"},{"location":"module_d/#test.jl-1","page":"Appendix","title":"test.jl","text":"","category":"section"},{"location":"module_d/#","page":"Appendix","title":"Appendix","text":"Code to test RbO.jl","category":"page"},{"location":"module_d/#","page":"Appendix","title":"Appendix","text":"using RbO, Plots, Statistics\npyplot()\n\n# ### Create subscribers\ndaisy = createSubscriber( \"Daisy Duck\", \"daisy@duckcity.com\" )\ndonald = createSubscriber( \"Donald Duck\", \"donald@duckcity.com\", STD_CALCULATOR )\nscrooge = createSubscriber( \"Scrooge McDuck\", \"scrooge@duckcity.com\", PLOTTER )\nmickey = createSubscriber( \"Micky Mouse\" )\n\n# ### Create newspapers and magazines\nchronicals = createPublisher( \"the Duck Chronicals\" )\n\n# Add subscribers to the Duck Chronicals\nsubscribe( chronicals, daisy )\nsubscribe( chronicals, donald )\nsubscribe( chronicals, scrooge )\nsubscribe( chronicals, mickey )\n\n# Unsubscribe Mickey Mouse\nchronicals = unsubscribe(chronicals, mickey)\n\n# ### Define message for the Duck Chronical subscribers\nmessage = createMessage( \"Weather station\", \"Temperatures\", [10.9, 12, 10.5, 12.7, 10.2] )\n\n# ### Print the messages\npaper = chronicals\n\n# List with the subscribers of a newspaper or magazine\nsm = map( x -> x.email == \"\" ? x.name : x.name * \" - \" * x.email, paper.list )\n\n# Print the subscribers\nlen =  length( \"Subscribers of \" * paper.name * string(paper.publishertype )) + 5\n\nprintln( \"\\n\" * \"=\"^len )\ntitle = titlecase( string( paper.publishertype ) )\nprintln( \" Subscribers of \" * paper.name * \" - \" * map(x -> x == '_' ? ' ' : x , title ) )\nprintln( \"=\"^len )\nfor subscriber in sm\n    println( \" \" * subscriber )\nend\nprintln( '='^len )\n\n# ### Define the function 'processMessage' to process data depending on SubsriberType\n#result = []\nprocessMessage( s::Subscriber, n::Publisher, m::Message ) = begin\n    if s.subscribertype == STD_CALCULATOR\n        println( s.name * \":\\t the standard deviation of the last five temperatures is: \" * string( round( std(m.body); digits=2) ) * \" °C\" )\n    elseif s.subscribertype == MEAN_CALCULATOR\n        #println( s.name * \":\\t the average of the last five temperatures is: \" * string(sum(m.body) / length(m.body)) * \" °C\" )\n        println( s.name * \":\\t the average of the last five temperatures is: \" * string( mean( m.body ) ) * \" °C\" )\n    elseif s.subscribertype == PLOTTER\n        println( s.name * \":\\t the dataset with the last five temperatures is: \" * string( m.body ) )\n        global result = m.body\n    end\nend\n\n# ### Notify scubscribers\nsendMessage( chronicals, message, processMessage )\n\n# ### Plot data\nplot( result )\n","category":"page"},{"location":"module_d/#make.jl-1","page":"Appendix","title":"make.jl","text":"","category":"section"},{"location":"module_d/#","page":"Appendix","title":"Appendix","text":"Script to create the User Manual","category":"page"},{"location":"module_d/#","page":"Appendix","title":"Appendix","text":"using Documenter\nusing RbO, Statistics\nusing Test\n\ndoctest(RbO)\n\nmakedocs(\n    sitename = \"RbO.jl\",\n    format = Documenter.HTML(),\n    modules = [RbO],\n    pages = [\n        \"User Manual\" => \"index.md\",\n        \"Installing the module\" => \"module_a.md\",\n        \"Public Interface\" => [\n            \"API methods\" => \"module_b.md\",\n            \"Infrascructure methods\" => \"module_b2.md\",\n            \"Domain items\" => \"module_c.md\",\n            \"Example\" => \"module_b3.md\"\n        ],\n        \"Appendix\" => \"module_d.md\"\n    ]\n)","category":"page"},{"location":"module_d/#doc.jl-1","page":"Appendix","title":"doc.jl","text":"","category":"section"},{"location":"module_d/#","page":"Appendix","title":"Appendix","text":"Script to create the Julia Notebook","category":"page"},{"location":"module_d/#","page":"Appendix","title":"Appendix","text":"# Uncomment the next line when RbO has been cloned.\n#push!(LOAD_PATH, \"/home/rob/julia_projects/RbO.jl/src/\")\ninclude(\"./test.jl\")\nusing Literate\nLiterate.notebook(\"./test.jl\", \".\"; documenter=false)","category":"page"},{"location":"module_d/#Julia-Notebook-1","page":"Appendix","title":"Julia Notebook","text":"","category":"section"},{"location":"module_d/#","page":"Appendix","title":"Appendix","text":"You can find an example of the code in a Julia Notebook on GitHub. See: https://github.com/rbontekoe/RbO.jl/blob/master/test.ipynb","category":"page"},{"location":"module_d/#References-1","page":"Appendix","title":"References","text":"","category":"section"},{"location":"module_d/#","page":"Appendix","title":"Appendix","text":"Parallel & Distributed Computing\nAnnouncing composable multi-threaded parallelism in Julia\nThe julia Magazine","category":"page"},{"location":"module_b/#API-methods-1","page":"API methods","title":"API methods","text":"","category":"section"},{"location":"module_b/#","page":"API methods","title":"API methods","text":"I have taken the Observer Pattern as the goal to implement the project. The main objects are Publisher and Subscriber. The Publisher delivers a message to the Subscribers. The information consists of temperatures that were measured.","category":"page"},{"location":"module_b/#Exports-1","page":"API methods","title":"Exports","text":"","category":"section"},{"location":"module_b/#","page":"API methods","title":"API methods","text":"API methods","category":"page"},{"location":"module_b/#","page":"API methods","title":"API methods","text":"createSubscriber, createPublisher, createMessage, sendMessage","category":"page"},{"location":"module_b/#","page":"API methods","title":"API methods","text":"Domain objects","category":"page"},{"location":"module_b/#","page":"API methods","title":"API methods","text":"Subscriber, Publisher, Message","category":"page"},{"location":"module_b/#","page":"API methods","title":"API methods","text":"SubscriberType values","category":"page"},{"location":"module_b/#","page":"API methods","title":"API methods","text":"MEAN_CALCULATOR, STD_CALCULATOR, PLOTTER","category":"page"},{"location":"module_b/#","page":"API methods","title":"API methods","text":"PublisherType values","category":"page"},{"location":"module_b/#","page":"API methods","title":"API methods","text":"NEWSPAPER, MAGAZINE, SOCIAL_MEDIA","category":"page"},{"location":"module_b/#createSubscriber-1","page":"API methods","title":"createSubscriber","text":"","category":"section"},{"location":"module_b/#","page":"API methods","title":"API methods","text":"createSubscriber","category":"page"},{"location":"module_b/#RbO.createSubscriber","page":"API methods","title":"RbO.createSubscriber","text":"createSubscriber( name::String )::Subscriber\n\nCreates a Subscriber.\n\nExample\n\njulia> using RbO\n\njulia> mickey = createSubscriber( \"Micky Mouse\" );\n\n\n\n\n\ncreateSubscriber( name::String, email::String )::Subscriber\n\nCreates a Subscriber with an e-mail address.\n\nExample\n\njulia> using RbO\n\njulia> createSubscriber( \"Daisy Mouse\", \"daisy@duckcity.com\" )\nSubscriber(\"12318486163220258938\", \"Daisy Mouse\", \"daisy@duckcity.com\", MEAN_CALCULATOR::SubscriberType = 0)\n\n\n\n\n\ncreateSubscriber( name::String, email::String, subscribertype::SubscriberType )::Subscriber\n\nCreates a Subscriber with a name, an e-mail address, and SubscriberType.\n\nExample\n\njulia> using RbO\n\njulia> scrooge = createSubscriber( \"Scrooge McDuck\", \"scrooge@duckcity.com\", PLOTTER );\n\n\n\n\n\n","category":"function"},{"location":"module_b/#updateSubscriber-1","page":"API methods","title":"updateSubscriber","text":"","category":"section"},{"location":"module_b/#","page":"API methods","title":"API methods","text":"updateSubscriber","category":"page"},{"location":"module_b/#RbO.updateSubscriber","page":"API methods","title":"RbO.updateSubscriber","text":"updateSubscriber( subscriber::Subscriber, name::String, email::String, subscribertype::SubscriberType )::Subscriber\n\nUpdate a Subscriber. Empty strings (\"\") don't modify the data. subscribertype should always be specified.\n\nExample\n\njulia> using RbO\n\njulia> daisy = createSubscriber( \"Daisy\" )\nSubscriber(\"16587901847852633888\", \"Daisy\", \"\", MEAN_CALCULATOR::SubscriberType = 0)\n\njulia> daisy = updateSubscriber(daisy, \"Daisy Mouse\", \"daisy@duckcity.com\", daisy.subscribertype )\nSubscriber(\"16587901847852633888\", \"Daisy Mouse\", \"daisy@duckcity.com\", MEAN_CALCULATOR::SubscriberType = 0)\n\n\n\n\n\n","category":"function"},{"location":"module_b/#createPublisher-1","page":"API methods","title":"createPublisher","text":"","category":"section"},{"location":"module_b/#","page":"API methods","title":"API methods","text":"createPublisher","category":"page"},{"location":"module_b/#RbO.createPublisher","page":"API methods","title":"RbO.createPublisher","text":"createPublisher( name::String )::Publisher\n\nCreates a Publisher.\n\nExamples\n\njulia> using RbO\n\njulia> nyt = createPublisher(\"\")::Publisher\nERROR: MissingException: Publisher name is mandatory\n\njulia> nyt = createPublisher( \"The New York Times\" );\n\n\n\n\n\ncreatePublisher( name::String, publishertype::PublisherType )::Publisher\n\nReturns a Publisher object.\n\nExample\n\njulia> using RbO\n\njulia> chronicals = createPublisher( \"the Duck Chronicals\", MAGAZINE );\n\n\n\n\n\n","category":"function"},{"location":"module_b/#updatePublisher-1","page":"API methods","title":"updatePublisher","text":"","category":"section"},{"location":"module_b/#","page":"API methods","title":"API methods","text":"updatePublisher","category":"page"},{"location":"module_b/#RbO.updatePublisher","page":"API methods","title":"RbO.updatePublisher","text":"updatePublisher( publisher::Publisher, name::String, publishertype::PublisherType )::Publisher\n\nUpdate a Publisher. Empty strings (\"\") don't modify the data. '''publishertype''' should always be specified.\n\nExample\n\njulia> using RbO\n\njulia> nyt = createPublisher( \"New York times\" )\nPublisher(\"9842848910504957757\", \"New York times\", NEWSPAPER::PublisherType = 0, Subscriber[])\n\njulia> nyt = updatePublisher( nyt, \"The New York Times\", nyt.publishertype )\nPublisher(\"9842848910504957757\", \"The New York Times\", NEWSPAPER::PublisherType = 0, Subscriber[])\n\n\n\n\n\n","category":"function"},{"location":"module_b/#subscribe-1","page":"API methods","title":"subscribe","text":"","category":"section"},{"location":"module_b/#","page":"API methods","title":"API methods","text":"subscribe","category":"page"},{"location":"module_b/#RbO.subscribe","page":"API methods","title":"RbO.subscribe","text":"subscribe( p::Publisher, s::Subscriber )::Publisher\n\nAdds a subscriber to the list with subscribers of a Publisher.\n\nExample\n\njulia> using RbO\n\njulia> daisy = createSubscriber( \"Daisy Mouse\", \"daisy@duckcity.com\" )\nSubscriber(\"12635951225266630417\", \"Daisy Mouse\", \"daisy@duckcity.com\", MEAN_CALCULATOR::SubscriberType = 0)\n\njulia> scrooge = createSubscriber( \"Scrooge McDuck\", \"scrooge@duckcity.com\", PLOTTER )\nSubscriber(\"10413109711473660059\", \"Scrooge McDuck\", \"scrooge@duckcity.com\", PLOTTER::SubscriberType = 2)\n\njulia> chronicals = createPublisher( \"the Duck Chronicals\", MAGAZINE )\nPublisher(\"3837529886997444322\", \"the Duck Chronicals\", MAGAZINE::PublisherType = 1, Subscriber[])\n\njulia> subscribe( chronicals, daisy )\nPublisher(\"1914673065319653327\", \"the Duck Chronicals\", MAGAZINE::PublisherType = 1, Subscriber[Subscriber(\"12635951225266630417\", \"Daisy Mouse\", \"daisy@duckcity.com\", MEAN_CALCULATOR)])\n\njulia> subscribe( chronicals, scrooge )\nPublisher(\"13462719397894381475\", \"the Duck Chronicals\", MAGAZINE::PublisherType = 1, Subscriber[Subscriber(\"12635951225266630417\", \"Daisy Mouse\", \"daisy@duckcity.com\", MEAN_CALCULATOR), Subscriber(\"10413109711473660059\", \"Scrooge McDuck\", \"scrooge@duckcity.com\", PLOTTER)])\n\n\n\n\n\n\n","category":"function"},{"location":"module_b/#unsubscribe-1","page":"API methods","title":"unsubscribe","text":"","category":"section"},{"location":"module_b/#","page":"API methods","title":"API methods","text":"unsubscribe","category":"page"},{"location":"module_b/#RbO.unsubscribe","page":"API methods","title":"RbO.unsubscribe","text":"unsubscribe( p::Publisher, s::Subscriber )::Publisher\n\nRemoves a subscriber from the list of subscribers of a Publisher,\n\nExample\n\njulia> using RbO\n\njulia> mickey = createSubscriber( \"Micky Mouse\" )\nSubscriber(\"3423088500793114972\", \"Micky Mouse\", \"\", MEAN_CALCULATOR::SubscriberType = 0)\n\njulia> chronicals = createPublisher( \"the Duck Chronicals\", MAGAZINE )\nPublisher(\"17516499932697635194\", \"the Duck Chronicals\", MAGAZINE::PublisherType = 1, Subscriber[])\n\njulia> subscribe( chronicals, mickey )\nPublisher(\"5230641724437552158\", \"the Duck Chronicals\", MAGAZINE::PublisherType = 1, Subscriber[Subscriber(\"3423088500793114972\", \"Micky Mouse\", \"\", MEAN_CALCULATOR)])\n\njulia> chronicals = unsubscribe( chronicals, mickey )\nPublisher(\"8395917352308977462\", \"the Duck Chronicals\", MAGAZINE::PublisherType = 1, Subscriber[])\n\n\n\n\n\n","category":"function"},{"location":"module_b/#","page":"API methods","title":"API methods","text":"note: Note\nPublisher is an immutable object. 'unscubscribe' creates a new Publisher object, and is reassigned to the variable 'chronicals'.","category":"page"},{"location":"module_b/#createMessage-1","page":"API methods","title":"createMessage","text":"","category":"section"},{"location":"module_b/#","page":"API methods","title":"API methods","text":"createMessage","category":"page"},{"location":"module_b/#RbO.createMessage","page":"API methods","title":"RbO.createMessage","text":"createMessage(header::String, subject::String, body::Array{Float64, 1})::Message\n\nCreate a Message for the subscribers of a publisher.\n\nExample\n\njulia> using RbO\n\njulia> message = createMessage( \"Weather station\", \"Temperatures\", [10.9, 12, 10.5, 12.7, 10.2] );\n\n\n\n\n\n","category":"function"},{"location":"module_b/#updateMessage-1","page":"API methods","title":"updateMessage","text":"","category":"section"},{"location":"module_b/#","page":"API methods","title":"API methods","text":"updateMessage","category":"page"},{"location":"module_b/#RbO.updateMessage","page":"API methods","title":"RbO.updateMessage","text":"updateMessage( message::Message, header::String, subject::String, body::Array{Float64, 1})::Message\n\nUpdate a Message. Empty strings (\"\") don't modify the data. '''body''' should always be specified.\n\n#Example\n\njulia> using RbO\n\njulia> message = createMessage( \"Wether station\", \"Temperatures\", [10.9, 12, 10.5, 12.7, 10.2] )\nMessage(\"1941280172945521746\", \"Wether station\", \"Temperatures\", [10.9, 12.0, 10.5, 12.7, 10.2])\n\njulia> message = updateMessage( message, \"Weather Station XYZ\", \"\", message.body )\nMessage(\"1941280172945521746\", \"Weather Station XYZ\", \"Temperatures\", [10.9, 12.0, 10.5, 12.7, 10.2])\n\n\n\n\n\n","category":"function"},{"location":"module_b/#sendMessage-1","page":"API methods","title":"sendMessage","text":"","category":"section"},{"location":"module_b/#","page":"API methods","title":"API methods","text":"sendMessage","category":"page"},{"location":"module_b/#RbO.sendMessage","page":"API methods","title":"RbO.sendMessage","text":"sendMessage( n::Publisher, m::Message, f::Function )\n\nNotifies subscribers of a Publisher.\n\nExample\n\njulia> using RbO, Statistics\n\njulia> daisy = createSubscriber( \"Daisy Mouse\", \"daisy@duckcity.com\" );\n\njulia> scrooge = createSubscriber( \"Scrooge McDuck\", \"scrooge@duckcity.com\", PLOTTER );\n\njulia> chronicals = createPublisher( \"the Duck Chronicals\", MAGAZINE );\n\njulia> subscribe( chronicals, daisy );\n\njulia> subscribe( chronicals, scrooge );\n\njulia> message = createMessage( \"Weather station\", \"Temperatures\", [10.9, 12, 10.5, 12.7, 10.2] );\n\njulia> result = []\n0-element Array{Any,1}\n\njulia> processMessage( s::Subscriber, n::Publisher, m::Message ) = begin\n           if s.subscribertype == STD_CALCULATOR\n               println( s.name * \": the standard deviation of the last five temperatures is: \" * string( round( std(m.body); digits=2) ) * \" °C\" )\n           elseif s.subscribertype == MEAN_CALCULATOR\n               println( s.name * \": the average of the last five temperatures is: \" * string( mean( m.body ) ) * \" °C\" )\n           elseif s.subscribertype == PLOTTER\n               println( s.name * \": the dataset with the last five temperatures is: \" * string( m.body ) )\n               global result = m.body\n           end\n       end\nprocessMessage (generic function with 1 method)\n\njulia> sendMessage( chronicals, message, processMessage )\nDaisy Mouse: the average of the last five temperatures is: 11.26 °C\nScrooge McDuck: the dataset with the last five temperatures is: [10.9, 12.0, 10.5, 12.7, 10.2]\n\n\n\n\n\n","category":"function"},{"location":"module_a/#Installing-the-module-1","page":"Installing the module","title":"Installing the module","text":"","category":"section"},{"location":"module_a/#","page":"Installing the module","title":"Installing the module","text":"The module can be added or cloned from GitHub: https://github.com/rbontekoe/RbO.jl.","category":"page"},{"location":"module_a/#Example-of-adding-the-module-1","page":"Installing the module","title":"Example of adding the module","text":"","category":"section"},{"location":"module_a/#","page":"Installing the module","title":"Installing the module","text":"Step Action Comment\n1 julia> ] Open Package manager.\n2 (v1.1) pkg> add https://github.com/rbontekoe/RbO.jl Add RbO.jl\n3 (v1.1) pkg> Ctrl-C Return to Julia.\n4 julia> using RbO Activate RbO.","category":"page"},{"location":"module_a/#Example-of-cloning-the-module-1","page":"Installing the module","title":"Example of cloning the module","text":"","category":"section"},{"location":"module_a/#","page":"Installing the module","title":"Installing the module","text":"Step Action Comment\n1 $ mkdir julia_projects \n2 $ cd julia_projects \n3 $ git clone https://github.com/rbontekoe/RbO.jl.git Download the package RbO.\n4 $ cd RbO.jl Go to RbO.jl directory.\n5 $ julia Start Julia\n6 julia> push!(LOAD_PATH, \"/home/rob/julia_projects/RbO.jl/src/\") Declare path.\n7 julia> using RbO Activate package","category":"page"},{"location":"module_c/#Domain-Items-1","page":"Domain items","title":"Domain Items","text":"","category":"section"},{"location":"module_c/#Subscriber-1","page":"Domain items","title":"Subscriber","text":"","category":"section"},{"location":"module_c/#","page":"Domain items","title":"Domain items","text":"Subscriber","category":"page"},{"location":"module_c/#RbO.Subscriber","page":"Domain items","title":"RbO.Subscriber","text":"struct Subscriber <: DomainObject\n\nReturns a Subscriber. It is preferred to use createSubscriber.\n\nExample\n\njulia> using RbO\n\njulia> daisy = Subscriber(\"Daisy\")\nSubscriber(\"13648859580074120351\", \"Daisy\", \"\", MEAN_CALCULATOR::SubscriberType = 0)\n\n\n\n\n\n","category":"type"},{"location":"module_c/#SubscriberType-1","page":"Domain items","title":"SubscriberType","text":"","category":"section"},{"location":"module_c/#","page":"Domain items","title":"Domain items","text":"SubscriberType","category":"page"},{"location":"module_c/#RbO.SubscriberType","page":"Domain items","title":"RbO.SubscriberType","text":"SubscriberType\n\nValues\n\nSTD_CALCULATOR (caluclates the standard deviation of set of data, default value)\nMEAN_CALCULATOR (caluclates the mean of set of data)\nPLOTTER (keeps the dataset for plotting)\n\n\n\n\n\n","category":"type"},{"location":"module_c/#Publisher-1","page":"Domain items","title":"Publisher","text":"","category":"section"},{"location":"module_c/#","page":"Domain items","title":"Domain items","text":"Publisher","category":"page"},{"location":"module_c/#RbO.Publisher","page":"Domain items","title":"RbO.Publisher","text":"struct Publisher <: DomainObject\n\nReturns a Publisher object.  It is preferred to use createPublisher.\n\nExample\n\njulia> using RbO\n\njulia> chronicals = Publisher(\"The Duck City Chornicals\", NEWSPAPER, Subscriber[])\nPublisher(\"3207093602141662250\", \"The Duck City Chornicals\", NEWSPAPER::PublisherType = 0, Subscriber[])\n\n\n\n\n\n","category":"type"},{"location":"module_c/#PublisherType-1","page":"Domain items","title":"PublisherType","text":"","category":"section"},{"location":"module_c/#","page":"Domain items","title":"Domain items","text":"PublisherType","category":"page"},{"location":"module_c/#RbO.PublisherType","page":"Domain items","title":"RbO.PublisherType","text":"PublisherType\n\nValues\n\nNEWSPAPER\nMAGAZINE\nSOCIAL_MEDIA\n\n\n\n\n\n","category":"type"},{"location":"module_c/#Message-1","page":"Domain items","title":"Message","text":"","category":"section"},{"location":"module_c/#","page":"Domain items","title":"Domain items","text":"Message","category":"page"},{"location":"module_c/#RbO.Message","page":"Domain items","title":"RbO.Message","text":"struct Message <: Information\n\nReturns a Message object.  It is preferred to use createMessage.\n\nExample\n\njulia> using RbO\n\njulia> message = Message( \"Weather station\", \"Temperatures\", [10.9, 12, 10.5, 12.7, 10.2] )\nMessage(\"6473886582379654438\", \"Weather station\", \"Temperatures\", [10.9, 12.0, 10.5, 12.7, 10.2])\n\n\n\n\n\n","category":"type"},{"location":"#User-Manual-1","page":"User Manual","title":"User Manual","text":"","category":"section"},{"location":"#Contents-1","page":"User Manual","title":"Contents","text":"","category":"section"},{"location":"#","page":"User Manual","title":"User Manual","text":"Depth = 3","category":"page"},{"location":"#Introduction-1","page":"User Manual","title":"Introduction","text":"","category":"section"},{"location":"#","page":"User Manual","title":"User Manual","text":"I like to master the Julia programming language. To get more experience, I created the project 'rbontekoe/RbO.jl.'","category":"page"},{"location":"#","page":"User Manual","title":"User Manual","text":"Also, I decided to use Documenter.jl to create the documentation for the project, after looking at a video that explains its features. I was impressed when Morton Phiibleht told about the possibility to test the code example automatically during the creation of the manual. The result is this manual.","category":"page"},{"location":"#","page":"User Manual","title":"User Manual","text":"For the creation of the Julia notebook, I used Literate.jl, after watching this video.","category":"page"},{"location":"#Logbook-1","page":"User Manual","title":"Logbook","text":"","category":"section"},{"location":"#/17/2019-1","page":"User Manual","title":"9/17/2019","text":"","category":"section"},{"location":"#","page":"User Manual","title":"User Manual","text":"Reading Think Julia I discovered the package Serialization. While playing with it, I realized that it could solve my CQRS and Event Sourcing problem. With the method serialize, you can create a text representation of an object, that you can store. With deserialize, you do the reverse. Serialize writes to an IOStream, and deserialize reads from it. An IOStream can be an IOBuffer or a file. It makes Event Sourcing easier.","category":"page"},{"location":"#","page":"User Manual","title":"User Manual","text":"I also looked at channels. You can use channels to communicate between processes. For the time being, I will use inter CPU-core communication. Later on, I extend it to remote nodes. I only have to expand the methods of createSubscriber and createPublisher.","category":"page"},{"location":"#/10/2019-1","page":"User Manual","title":"9/10/2019","text":"","category":"section"},{"location":"#","page":"User Manual","title":"User Manual","text":"Last week I was busy implementing the database methods. I realized that the domain objects I wanted to keep must have an identification code. So Subscriber, Publisher, and Message got an id. To create the id, I used the hash function with a name and time as a parameter. It had consequences for the documentation. In the example code, I used the tag 'jldoctest,' so Documenter could test the example code during the generation of the manual. Because the ids keep changing, I had to give up. Too bad, because I found that a strong point of Documenter.jl. I replaced the test tag 'jldoctest' with the language tag 'julia.' Maybe there is something to do against continually changing values.","category":"page"},{"location":"#","page":"User Manual","title":"User Manual","text":"Infected by the CQRS thought, I decided to add changed domain objects to the database instead of modifying an existing record.","category":"page"},{"location":"module_b3/#Examples-1","page":"Example","title":"Examples","text":"","category":"section"},{"location":"module_b3/#","page":"Example","title":"Example","text":"using  RbO\n\n# create on-disk db\n# db = connect(\"./rbo.sqlite\")\n# create in-memory db\ndb = connect()\n\n# create subscribers\nconst daisy = createSubscriber( \"Daisy\" )\nconst mickey = createSubscriber( \"Mickey\" )\nconst scrooge = createSubscriber( \"Scrooge McDuck\", \"scrooge@duckcity.com\", PLOTTER )\n\n# store in DatabaseItem\ndata = [daisy, mickey, scrooge]\ncreate(db , \"subscribers\", data)\n\n# read data back\nr = gather(db, \"subscribers\")\nprintln(r)\n\n# update subscriber\ndaisy = updateSubscriber(daisy, \"Daisy Duck\", \"daisy@duckcity.com\", PLOTTER)\ndata = [daisy]\nupdate(db, \"subscribers\", data)\n\n# read data back (subscriber should be added, action UPDATE)\nr = gather(db, \"subscribers\")\nprintln(r)\n\n# read selective\nr = gather(db, \"subscribers\", \"key = '\" * daisy.id * \"'\")\nprintln(r)\n\n# create Publisher and add subscriber\nconst nyt = createPublisher( \"New York Times\")\nsubscribe(nyt, daisy)\n\n# store in DatabaseItem\ndata = [nyt]\ncreate(db, \"publishers\", data)\n\n# read back\nr = gather(db, \"publishers\")\nprintln(r)\n\n# update Publisher\nnyt = updatePublisher(nyt, \"The New York Times\", NEWSPAPER)\nupdate(db, \"publishers\", [nyt])\n\n# read publisher from database\nr = gather(db, \"publishers\")\nprintln(r)\n\n# add subscriber to publisher\nnyt = subscribe(nyt, scrooge)\nupdate(db, \"publishers\", [nyt])\n\n# read back\nr = gather(db, \"publishers\")\nprintln(r)\n\n## MANIPULTATIONS\n\n# Reading all subscribers\nr = gather(db, \"subscribers\")\n\n# Convert name of subscriber to uppercase and store in database\ns = map(i -> updateSubscriber(i, uppercase(i.name), i.email, i.subscribertype), r.item)\nupdate(db, \"subscribers\", s)\n\n# reading back subscrivbers\nr = gather(db, \"subscribers\")\nprintln(r)\n\n# list of the latest mutations (last added subscribers)\nusing DataFrames\nt = map( i -> last(gather( db, \"subscribers\", \"key = '$i'\" )).item, unique(r.key) ) |> DataFrame\nprintln(t)\n\n# MESSAGE tests\nmessage = createMessage( \"Wether\", \"Temperatures\", [19.0, 23.0, 24.5] )\ncreate( db, \"messages\", [message] )\nr = gather( db, \"messages\" )\nprintln( r )\n\nmessage = updateMessage( message, \"Weather\", \"\", [19.0, 22.5, 24.5] )\nupdate( db, \"messages\", [message] )\nr = gather( db, \"messages\" )\nprintln( r )","category":"page"},{"location":"module_b2/#Infrastructure-methods-1","page":"Infrascructure methods","title":"Infrastructure methods","text":"","category":"section"},{"location":"module_b2/#","page":"Infrascructure methods","title":"Infrascructure methods","text":"I have taken the Observer Pattern as the goal to implement the project. The main objects are Publisher and Subscriber. The Publisher delivers a message to the Subscribers. The information consists of temperatures that were measured.","category":"page"},{"location":"module_b2/#Exports-1","page":"Infrascructure methods","title":"Exports","text":"","category":"section"},{"location":"module_b2/#","page":"Infrascructure methods","title":"Infrascructure methods","text":"Database methods","category":"page"},{"location":"module_b2/#","page":"Infrascructure methods","title":"Infrascructure methods","text":"connect, create, gather, update, delete","category":"page"},{"location":"module_b2/#connect-1","page":"Infrascructure methods","title":"connect","text":"","category":"section"},{"location":"module_b2/#","page":"Infrascructure methods","title":"Infrascructure methods","text":"connect","category":"page"},{"location":"module_b2/#RbO.connect","page":"Infrascructure methods","title":"RbO.connect","text":"connect(path::String)::SQLite.DB\n\nReturns a database.\n\nExample\n\njulia> using RbO\n\njulia> db = connect(\"./rbo.sqlite\")\nSQLite.DB(\"./rbo.sqlite\")\n\n\n\n\n\nconnect()::SQLite.DB\n\nReturns an in-memory database.\n\nExample\n\njulia> using RbO\n\njulia> db = connect()\nSQLite.DB(in-memory)\n\n\n\n\n\n","category":"function"},{"location":"module_b2/#create-1","page":"Infrascructure methods","title":"create","text":"","category":"section"},{"location":"module_b2/#","page":"Infrascructure methods","title":"Infrascructure methods","text":"create","category":"page"},{"location":"module_b2/#RbO.create","page":"Infrascructure methods","title":"RbO.create","text":"create( db::SQLite.DB, table::String, domainItems::Array{Subscriber, 1} )\n\nStore subscribes in a database table.\n\nExample\n\njulia> using RbO\n\njulia> daisy = createSubscriber( \"Daisy\" );\n\njulia> mickey = createSubscriber( \"Mickey\" );\n\njulia> data = [ daisy, mickey ];\n\njulia> db = connect()\nSQLite.DB(in-memory)\n\njulia> create( db, \"subscribers\", data )\n\"subscribers\"\n\n\n\n\n\ncreate( db::SQLite.DB, table::String, domainItems::Array{Publisher, 1} )\n\nStore publishers in a database table.\n\nExampple\n\njulia> using RbO\n\njulia> nyt = createPublisher( \"The New York Times\" );\n\njulia> db = connect()\nSQLite.DB(in-memory)\n\njulia> create(db, \"publishers\", [ nyt ])\n\"publishers\"\n\n\n\n\n\ncreate( db::SQLite.DB, table::String, domainItems::Array{Message, 1} )\n\nStore publishers in a database table.\n\n\n\n\n\n","category":"function"},{"location":"module_b2/#gather-(read)-1","page":"Infrascructure methods","title":"gather (read)","text":"","category":"section"},{"location":"module_b2/#","page":"Infrascructure methods","title":"Infrascructure methods","text":"gather","category":"page"},{"location":"module_b2/#RbO.gather","page":"Infrascructure methods","title":"RbO.gather","text":"gather( db::SQLite.DB, table::String )::DataFrame\n\nReturns a dataframe with all entries\n\njulia> using RbO\n\njulia> daisy = createSubscriber( \"Daisy\" )\nSubscriber(\"14400338531749444750\", \"Daisy\", \"\", MEAN_CALCULATOR::SubscriberType = 0)\n\njulia> mickey = createSubscriber( \"Mickey\" )\nSubscriber(\"7987502302757180929\", \"Mickey\", \"\", MEAN_CALCULATOR::SubscriberType = 0)\n\njulia> db = connect()\nSQLite.DB(in-memory)\n\njulia> create( db, \"subscribers\", [ daisy, mickey ] )\n\"subscribers\"\n\njulia> gather(db, \"subscribers\")\n┌ Warning: `T` is deprecated, use `nonmissingtype` instead.\n│   caller = compacttype(::Type, ::Int64) at show.jl:39\n└ @ DataFrames ~/.julia/packages/DataFrames/XuYBH/src/abstractdataframe/show.jl:39\n2×5 DataFrames.DataFrame\n│ Row │ time      │ agent   │ action  │ key                  │ item                                                             │\n│     │ Float64⍰  │ String⍰ │ String⍰ │ String⍰              │ Union{Missing, Subscriber}                                       │\n├─────┼───────────┼─────────┼─────────┼──────────────────────┼──────────────────────────────────────────────────────────────────┤\n│ 1   │ 1.56812e9 │ AB9F    │ CREATE  │ 14400338531749444750 │ Subscriber(\"14400338531749444750\", \"Daisy\", \"\", MEAN_CALCULATOR) │\n│ 2   │ 1.56812e9 │ AB9F    │ CREATE  │ 7987502302757180929  │ Subscriber(\"7987502302757180929\", \"Mickey\", \"\", MEAN_CALCULATOR) │\n\n\n\n\n\ngather( db::SQLite.DB, table::String, condition::String )::DataFrame\n\nReturn a DataFrame with all entries.\n\nExample\n\njulia> using RbO\n\njulia> daisy = createSubscriber( \"Daisy\" )\nSubscriber(\"5270518311956369638\", \"Daisy\", \"\", MEAN_CALCULATOR::SubscriberType = 0)\n\njulia> mickey = createSubscriber( \"Mickey\" )\nSubscriber(\"8580492032810188742\", \"Mickey\", \"\", MEAN_CALCULATOR::SubscriberType = 0)\n\njulia> db = connect()\nSQLite.DB(in-memory)\n\njulia> create( db, \"subscribers\", [ daisy, mickey ] )\n \"subscribers\"\n\njulia> gather( db, \"subscribers\", \"key = '\" * daisy.id * \"'\" )\n1×5 DataFrames.DataFrame\n│ Row │ time      │ agent   │ action  │ key                 │ item                                                            │\n│     │ Float64⍰  │ String⍰ │ String⍰ │ String⍰             │ Union{Missing, Subscriber}                                      │\n├─────┼───────────┼─────────┼─────────┼─────────────────────┼─────────────────────────────────────────────────────────────────┤\n│ 1   │ 1.56812e9 │ AB9F    │ CREATE  │ 5270518311956369638 │ Subscriber(\"5270518311956369638\", \"Daisy\", \"\", MEAN_CALCULATOR) │\n\n\n\n\n\n","category":"function"},{"location":"module_b2/#update-1","page":"Infrascructure methods","title":"update","text":"","category":"section"},{"location":"module_b2/#","page":"Infrascructure methods","title":"Infrascructure methods","text":"update","category":"page"},{"location":"module_b2/#RbO.update","page":"Infrascructure methods","title":"RbO.update","text":"update( db::SQLite.DB, table::String, domainItems::Array{Subscribers, 1} )\n\nExample\n\njulia> using RbO\n\njulia> daisy = createSubscriber( \"Daisy\" )\nSubscriber(\"5270518311956369638\", \"Daisy\", \"\", MEAN_CALCULATOR::SubscriberType = 0)\n\njulia> mickey = createSubscriber( \"Mickey\" )\nSubscriber(\"8580492032810188742\", \"Mickey\", \"\", MEAN_CALCULATOR::SubscriberType = 0)\n\njulia> db = connect()\nSQLite.DB(in-memory)\n\njulia> create( db, \"subscribers\", [ daisy, mickey ] )\n \"subscribers\"\n\njulia> gather( db, \"subscribers\", \"key = '\" * daisy.id * \"'\" )\n1×5 DataFrames.DataFrame\n│ Row │ time      │ agent   │ action  │ key                 │ item                                                            │\n│     │ Float64⍰  │ String⍰ │ String⍰ │ String⍰             │ Union{Missing, Subscriber}                                      │\n├─────┼───────────┼─────────┼─────────┼─────────────────────┼─────────────────────────────────────────────────────────────────┤\n│ 1   │ 1.56812e9 │ AB9F    │ CREATE  │ 5270518311956369638 │ Subscriber(\"5270518311956369638\", \"Daisy\", \"\", MEAN_CALCULATOR) │\n\ndaisy = updateSubscriber( daisy, \"Daisy Duck\", \"daisy@duckcity.com\", daisy.subscribertype )\nSubscriber(\"5270518311956369638\", \"Daisy Duck\", \"daisy@duckcity.com\", MEAN_CALCULATOR::SubscriberType = 0)\n\njulia> update( db, \"subscribers\", [daisy] )\n\"subscribers\"\n\njulia> gather( db, \"subscribers\", \"key = '\" * daisy.id * \"'\" )\n2×5 DataFrames.DataFrame\n│ Row │ time      │ agent   │ action  │ key                 │ item                                                                                   │\n│     │ Float64⍰  │ String⍰ │ String⍰ │ String⍰             │ Union{Missing, Subscriber}                                                             │\n├─────┼───────────┼─────────┼─────────┼─────────────────────┼────────────────────────────────────────────────────────────────────────────────────────┤\n│ 1   │ 1.56812e9 │ AB9F    │ CREATE  │ 5270518311956369638 │ Subscriber(\"5270518311956369638\", \"Daisy\", \"\", MEAN_CALCULATOR)                        │\n│ 2   │ 1.56812e9 │ AB9F    │ UPDATE  │ 5270518311956369638 │ Subscriber(\"5270518311956369638\", \"Daisy Duck\", \"daisy@duckcity.com\", MEAN_CALCULATOR) │\n\n\n\n\n\nupdate( db::SQLite.DB, table::String, domainItems::Array{Publishers, 1} )\n\nUpdate publishers in a database table.\n\n\n\n\n\nupdate( db::SQLite.DB, table::String, domainItems::Array{Message, 1} )\n\nUpdate messages in a database table.\n\n\n\n\n\n","category":"function"}]
}
