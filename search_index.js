var documenterSearchIndex = {"docs":
[{"location":"#User-Manual-RbO.jl-1","page":"User Manual RbO.jl","title":"User Manual RbO.jl","text":"","category":"section"},{"location":"#Home-1","page":"User Manual RbO.jl","title":"Home","text":"","category":"section"},{"location":"#Contents-1","page":"User Manual RbO.jl","title":"Contents","text":"","category":"section"},{"location":"#","page":"User Manual RbO.jl","title":"User Manual RbO.jl","text":"","category":"page"},{"location":"#Introduction-1","page":"User Manual RbO.jl","title":"Introduction","text":"","category":"section"},{"location":"#","page":"User Manual RbO.jl","title":"User Manual RbO.jl","text":"Recently I focussed on the Julia programming language again. To get more experience, I created the project 'rbontekoe/RbO.jl.'","category":"page"},{"location":"#","page":"User Manual RbO.jl","title":"User Manual RbO.jl","text":"Also, I decided to use Documenter.jl as Julia package to create the documentation for the project, after looking at a video that explains its features. I was impressed when Morton Phiibleht told about the possibility to test the code example automatically during the creation of the manual. The result is this manual.","category":"page"},{"location":"#","page":"User Manual RbO.jl","title":"User Manual RbO.jl","text":"For the creation of the Julia notebook, I used Literate.jl, after watching this video.","category":"page"},{"location":"#Installing-the-module-1","page":"User Manual RbO.jl","title":"Installing the module","text":"","category":"section"},{"location":"#","page":"User Manual RbO.jl","title":"User Manual RbO.jl","text":"The module can be added or cloned from GitHub: https://github.com/rbontekoe/RbO.jl.","category":"page"},{"location":"#Example-of-adding-the-module-1","page":"User Manual RbO.jl","title":"Example of adding the module","text":"","category":"section"},{"location":"#","page":"User Manual RbO.jl","title":"User Manual RbO.jl","text":"julia> ]\n\n(v1.1) pkg> add https://github.com/rbontekoe/RbO.jl\n\njulia> using RbO","category":"page"},{"location":"#Example-of-cloning-the-module-1","page":"User Manual RbO.jl","title":"Example of cloning the module","text":"","category":"section"},{"location":"#","page":"User Manual RbO.jl","title":"User Manual RbO.jl","text":"$ mkdir julia_projects\n\n$ cd julia_projects\n\n$ git clone https://github.com/rbontekoe/RbO.jl.git\n\n$ cd RbO.jl\n\n$ julia\n\njulia> push!(LOAD_PATH, \"/home/rob/julia_projects/RbO.jl/src/\")\n\njulia> using RbO","category":"page"},{"location":"#Public-interface-1","page":"User Manual RbO.jl","title":"Public interface","text":"","category":"section"},{"location":"#","page":"User Manual RbO.jl","title":"User Manual RbO.jl","text":"I have taken the Observer Pattern as the goal to implement the project. The main objects are Publisher and Subscriber. The Publisher delivers a message to the Subscribers. The information consists of temperatures that were measured.","category":"page"},{"location":"#Exports-1","page":"User Manual RbO.jl","title":"Exports","text":"","category":"section"},{"location":"#","page":"User Manual RbO.jl","title":"User Manual RbO.jl","text":"API methods","category":"page"},{"location":"#","page":"User Manual RbO.jl","title":"User Manual RbO.jl","text":"createSubscriber, createPublisher, createMessage, sendMessage","category":"page"},{"location":"#","page":"User Manual RbO.jl","title":"User Manual RbO.jl","text":"Domain objects","category":"page"},{"location":"#","page":"User Manual RbO.jl","title":"User Manual RbO.jl","text":"Subscriber, Publisher, Message","category":"page"},{"location":"#","page":"User Manual RbO.jl","title":"User Manual RbO.jl","text":"SubscriberType values","category":"page"},{"location":"#","page":"User Manual RbO.jl","title":"User Manual RbO.jl","text":"MEAN_CALCULATOR, STD_CALCULATOR, PLOTTER","category":"page"},{"location":"#","page":"User Manual RbO.jl","title":"User Manual RbO.jl","text":"PublisherType values","category":"page"},{"location":"#","page":"User Manual RbO.jl","title":"User Manual RbO.jl","text":"NEWSPAPER, MAGAZINE, SOCIAL_MEDIA","category":"page"},{"location":"#createSubscriber-1","page":"User Manual RbO.jl","title":"createSubscriber","text":"","category":"section"},{"location":"#","page":"User Manual RbO.jl","title":"User Manual RbO.jl","text":"createSubscriber( name [, email [, subscribertype]] )","category":"page"},{"location":"#","page":"User Manual RbO.jl","title":"User Manual RbO.jl","text":"julia> using RbO, Statistics\n\njulia> mickey = createSubscriber( \"Mickey\" )\nSubscriber(\"Mickey\", \"\", MEAN_CALCULATOR::SubscriberType = 0)\n\njulia> daisy = createSubscriber( \"Daisy Duck\", \"daisy@duckcity.com\" )\nSubscriber(\"Daisy Duck\", \"daisy@duckcity.com\", MEAN_CALCULATOR::SubscriberType = 0)\n\njulia> donald = createSubscriber( \"Donald Duck\", \"donald@uckcity.com\", STD_CALCULATOR )\nSubscriber(\"Donald Duck\", \"donald@uckcity.com\", STD_CALCULATOR::SubscriberType = 1)\n\njulia> scrooge = createSubscriber( \"Scrooge McDuck\", \"scrooge@duckcity.com\", PLOTTER )\nSubscriber(\"Scrooge McDuck\", \"scrooge@duckcity.com\", PLOTTER::SubscriberType = 2)","category":"page"},{"location":"#createPublisher-1","page":"User Manual RbO.jl","title":"createPublisher","text":"","category":"section"},{"location":"#","page":"User Manual RbO.jl","title":"User Manual RbO.jl","text":"createPublisher( name [, publishertype] )","category":"page"},{"location":"#","page":"User Manual RbO.jl","title":"User Manual RbO.jl","text":"julia> nyt = createPublisher(\"New York Times\")\nPublisher(\"New York Times\", NEWSPAPER::PublisherType = 0, Subscriber[])\n\njulia> chronicals = createPublisher(\"The Duck City Chronicals\", MAGAZINE)\nPublisher(\"The Duck City Chronicals\", MAGAZINE::PublisherType = 1, Subscriber[])\n\njulia> np = createPublisher(\"\")\nERROR: MissingException: Publisher name is mandatory","category":"page"},{"location":"#subscribe-1","page":"User Manual RbO.jl","title":"subscribe","text":"","category":"section"},{"location":"#","page":"User Manual RbO.jl","title":"User Manual RbO.jl","text":"subscribe( p::Publisher, s::Subscriber )","category":"page"},{"location":"#","page":"User Manual RbO.jl","title":"User Manual RbO.jl","text":"julia> subscribe( chronicals, mickey )\nPublisher(\"The Duck City Chronicals\", MAGAZINE::PublisherType = 1, Subscriber[Subscriber(\"Mickey\", \"\", MEAN_CALCULATOR)])\n\njulia> subscribe( chronicals, daisy )\nPublisher(\"The Duck City Chronicals\", MAGAZINE::PublisherType = 1, Subscriber[Subscriber(\"Mickey\", \"\", MEAN_CALCULATOR), Subscriber(\"Daisy Duck\", \"daisy@duckcity.com\", MEAN_CALCULATOR)])\n\njulia> subscribe( chronicals, scrooge )\nPublisher(\"The Duck City Chronicals\", MAGAZINE::PublisherType = 1, Subscriber[Subscriber(\"Mickey\", \"\", MEAN_CALCULATOR), Subscriber(\"Daisy Duck\", \"daisy@duckcity.com\", MEAN_CALCULATOR), Subscriber(\"Scrooge McDuck\", \"scrooge@duckcity.com\", PLOTTER)])","category":"page"},{"location":"#unsubscribe-1","page":"User Manual RbO.jl","title":"unsubscribe","text":"","category":"section"},{"location":"#","page":"User Manual RbO.jl","title":"User Manual RbO.jl","text":"unsubscribe( p::Publisher, s::Subscriber )","category":"page"},{"location":"#","page":"User Manual RbO.jl","title":"User Manual RbO.jl","text":"julia> chronicals = unsubscribe(chronicals, mickey)\nPublisher(\"The Duck City Chronicals\", MAGAZINE::PublisherType = 1, Subscriber[Subscriber(\"Daisy Duck\", \"daisy@duckcity.com\", MEAN_CALCULATOR), Subscriber(\"Scrooge McDuck\", \"scrooge@duckcity.com\", PLOTTER)])","category":"page"},{"location":"#createMessage-1","page":"User Manual RbO.jl","title":"createMessage","text":"","category":"section"},{"location":"#","page":"User Manual RbO.jl","title":"User Manual RbO.jl","text":"createMessage(header::String, subject::String, body::Array{Float64, 1})","category":"page"},{"location":"#","page":"User Manual RbO.jl","title":"User Manual RbO.jl","text":"julia> message = createMessage( \"Weather station\", \"Temperatures\", [10.9, 12, 10.5, 12.7, 10.2] )\nMessage(\"Weather station\", \"Temperatures\", [10.9, 12.0, 10.5, 12.7, 10.2])","category":"page"},{"location":"#sendMessage-1","page":"User Manual RbO.jl","title":"sendMessage","text":"","category":"section"},{"location":"#","page":"User Manual RbO.jl","title":"User Manual RbO.jl","text":"sendMessage( p::Publisher, m::Message, f::Function )","category":"page"},{"location":"#","page":"User Manual RbO.jl","title":"User Manual RbO.jl","text":"julia> processMessage( s::Subscriber, n::Publisher, m::Message ) = begin\n                  if s.subscribertype == STD_CALCULATOR\n                      println( s.name * \": the standard deviation of the last five temperatures is: \" * string( round( std(m.body); digits=2) ) * \" °C\" )\n                  elseif s.subscribertype == MEAN_CALCULATOR\n                      println( s.name * \": the average of the last five temperatures is: \" * string( mean( m.body ) ) * \" °C\" )\n                  elseif s.subscribertype == PLOTTER\n                      println( s.name * \": the dataset with the last five temperatures is: \" * string( m.body ) )\n                      global result = m.body\n                  end\n              end\nprocessMessage (generic function with 1 method)\n\njulia> sendMessage( chronicals, message, processMessage )\nDaisy Duck: the average of the last five temperatures is: 11.26 °C\nScrooge McDuck: the dataset with the last five temperatures is: [10.9, 12.0, 10.5, 12.7, 10.2]","category":"page"},{"location":"#Examples-1","page":"User Manual RbO.jl","title":"Examples","text":"","category":"section"},{"location":"#test.jl-1","page":"User Manual RbO.jl","title":"test.jl","text":"","category":"section"},{"location":"#","page":"User Manual RbO.jl","title":"User Manual RbO.jl","text":"Code to test RoB and to create the Julia Notebook.","category":"page"},{"location":"#","page":"User Manual RbO.jl","title":"User Manual RbO.jl","text":"using RbO, Plots, Statistics\npyplot()\n\n# ### Create subscribers\ndaisy = createSubscriber( \"Daisy Duck\", \"daisy@duckcity.com\" )\ndonald = createSubscriber( \"Donald Duck\", \"donald@duckcity.com\", STD_CALCULATOR )\nscrooge = createSubscriber( \"Scrooge McDuck\", \"scrooge@duckcity.com\", PLOTTER )\nmickey = createSubscriber( \"Micky Mouse\" )\n\n# ### Create newspapers and magazines\nchronicals = createPublisher( \"the Duck Chronicals\" )\n\n# Add subscribers to the Duck Chronicals\nsubscribe( chronicals, daisy )\nsubscribe( chronicals, donald )\nsubscribe( chronicals, scrooge )\nsubscribe( chronicals, mickey )\n\n# Unsubscribe Mickey Mouse\nchronicals = unsubscribe(chronicals, mickey)\n\n# ### Define message for the Duck Chronical subscribers\nmessage = createMessage( \"Weather station\", \"Temperatures\", [10.9, 12, 10.5, 12.7, 10.2] )\n\n# ### Print the messages\npaper = chronicals\n\n# List with the subscribers of a newspaper or magazine\nsm = map( x -> x.email == \"\" ? x.name : x.name * \" - \" * x.email, paper.list )\n\n# Print the subscribers\nlen =  length( \"Subscribers of \" * paper.name * string(paper.publishertype )) + 5\nprintln( \"\\n\" * \"=\"^len )\ntitle = titlecase( string( paper.publishertype ) )\nprintln( \" Subscribers of \" * paper.name * \" - \" * map(x -> x == '_' ? ' ' : x , title ) )\nprintln( \"=\"^len )\n\nfor subscriber in sm\n    println( \" \" * subscriber )\nend\nprintln( '='^len )\n\n# ### Define the function 'processMessage' to process data depending on SubsriberType\n#result = []\nprocessMessage( s::Subscriber, n::Publisher, m::Message ) = begin\n    if s.subscribertype == STD_CALCULATOR\n        println( s.name * \":\\t the standard deviation of the last five temperatures is: \" * string( round( std(m.body); digits=2) ) * \" °C\" )\n    elseif s.subscribertype == MEAN_CALCULATOR\n        #println( s.name * \":\\t the average of the last five temperatures is: \" * string(sum(m.body) / length(m.body)) * \" °C\" )\n        println( s.name * \":\\t the average of the last five temperatures is: \" * string( mean( m.body ) ) * \" °C\" )\n    elseif s.subscribertype == PLOTTER\n        println( s.name * \":\\t the dataset with the last five temperatures is: \" * string( m.body ) )\n        global result = m.body\n    end\nend\n\n# ### Notify scubscribers\nsendMessage( chronicals, message, processMessage )\n\n# ### Plot the temperatures\nplot(result)","category":"page"},{"location":"#doc.jl-1","page":"User Manual RbO.jl","title":"doc.jl","text":"","category":"section"},{"location":"#","page":"User Manual RbO.jl","title":"User Manual RbO.jl","text":"Code to create the Julia Notebook","category":"page"},{"location":"#","page":"User Manual RbO.jl","title":"User Manual RbO.jl","text":"# Uncomment the next line when RbO has been cloned.\n#push!(LOAD_PATH, \"/home/rob/julia_projects/RbO.jl/src/\")\ninclude(\"./test.jl\")\nusing Literate\nLiterate.notebook(\"./test.jl\", \".\"; documenter=false)","category":"page"},{"location":"#Julia-Notebook-1","page":"User Manual RbO.jl","title":"Julia Notebook","text":"","category":"section"},{"location":"#","page":"User Manual RbO.jl","title":"User Manual RbO.jl","text":"You can find an example of the code in a Julia Notebook on GitHub. See: https://github.com/rbontekoe/RbO.jl/blob/master/test.ipynb","category":"page"}]
}
