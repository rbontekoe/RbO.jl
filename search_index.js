var documenterSearchIndex = {"docs":
[{"location":"#RbO.jl-1","page":"User Manual","title":"RbO.jl","text":"","category":"section"},{"location":"#Home-1","page":"User Manual","title":"Home","text":"","category":"section"},{"location":"#","page":"User Manual","title":"User Manual","text":"Pages = [\"index.md\"]\nDepth = 3","category":"page"},{"location":"#Introduction-1","page":"User Manual","title":"Introduction","text":"","category":"section"},{"location":"#","page":"User Manual","title":"User Manual","text":"I want to master the Julia programming language. To get more experience, I created the project 'rbontekoe/RbO.jl.'","category":"page"},{"location":"#","page":"User Manual","title":"User Manual","text":"Also, I decided to use Documenter.jl to create the documentation for the project, after looking at a video that explains its features. I was impressed when Morton Phiibleht told about the possibility to test the code example automatically during the creation of the manual. The result is this manual.","category":"page"},{"location":"#","page":"User Manual","title":"User Manual","text":"For the creation of the Julia notebook, I used Literate.jl, after watching this video.","category":"page"},{"location":"#Installing-the-module-1","page":"User Manual","title":"Installing the module","text":"","category":"section"},{"location":"#","page":"User Manual","title":"User Manual","text":"The module can be added or cloned from GitHub: https://github.com/rbontekoe/RbO.jl.","category":"page"},{"location":"#Example-of-adding-the-module-1","page":"User Manual","title":"Example of adding the module","text":"","category":"section"},{"location":"#","page":"User Manual","title":"User Manual","text":"julia> ]\n\n(v1.1) pkg> add https://github.com/rbontekoe/RbO.jl\n\n(v1.1) pkg> Ctrl-C\n\njulia> using RbO","category":"page"},{"location":"#Example-of-cloning-the-module-1","page":"User Manual","title":"Example of cloning the module","text":"","category":"section"},{"location":"#","page":"User Manual","title":"User Manual","text":"$ mkdir julia_projects\n\n$ cd julia_projects\n\n$ git clone https://github.com/rbontekoe/RbO.jl.git\n\n$ cd RbO.jl\n\n$ julia\n\njulia> push!(LOAD_PATH, \"/home/rob/julia_projects/RbO.jl/src/\")\n\njulia> using RbO","category":"page"},{"location":"#Public-interface-1","page":"User Manual","title":"Public interface","text":"","category":"section"},{"location":"#","page":"User Manual","title":"User Manual","text":"I have taken the Observer Pattern as the goal to implement the project. The main objects are Publisher and Subscriber. The Publisher delivers a message to the Subscribers. The information consists of temperatures that were measured.","category":"page"},{"location":"#Exports-1","page":"User Manual","title":"Exports","text":"","category":"section"},{"location":"#","page":"User Manual","title":"User Manual","text":"API methods","category":"page"},{"location":"#","page":"User Manual","title":"User Manual","text":"createSubscriber, createPublisher, createMessage, sendMessage","category":"page"},{"location":"#","page":"User Manual","title":"User Manual","text":"Domain objects","category":"page"},{"location":"#","page":"User Manual","title":"User Manual","text":"Subscriber, Publisher, Message","category":"page"},{"location":"#","page":"User Manual","title":"User Manual","text":"SubscriberType values","category":"page"},{"location":"#","page":"User Manual","title":"User Manual","text":"MEAN_CALCULATOR, STD_CALCULATOR, PLOTTER","category":"page"},{"location":"#","page":"User Manual","title":"User Manual","text":"PublisherType values","category":"page"},{"location":"#","page":"User Manual","title":"User Manual","text":"NEWSPAPER, MAGAZINE, SOCIAL_MEDIA","category":"page"},{"location":"#createSubscriber-1","page":"User Manual","title":"createSubscriber","text":"","category":"section"},{"location":"#","page":"User Manual","title":"User Manual","text":"createSubscriber","category":"page"},{"location":"#RbO.createSubscriber","page":"User Manual","title":"RbO.createSubscriber","text":"createSubscriber( name::String )::Sbubscriber\n\nCreates a Subscriber.\n\nExamples:\n\njulia> using RbO\n\njulia> mickey = createSubscriber( \"Micky Mouse\" )\nSubscriber(\"Micky Mouse\", \"\", MEAN_CALCULATOR::SubscriberType = 0)\n\n\n\n\n\ncreateSubscriber( name::String, email::String )::Subscriber\n\nCreates a Subscriber with an e-mail address.\n\nExample:\n\njulia> using RbO\n\njulia> daisy = createSubscriber( \"Daisy Mouse\", \"daisy@duckcity.com\" )\nSubscriber(\"Daisy Mouse\", \"daisy@duckcity.com\", MEAN_CALCULATOR::SubscriberType = 0)\n\n\n\n\n\ncreateSubscriber( name::String, email::String, subscribertype::SubscriberType )::Subscriber\n\nCreates a Subscriber with a name, an e-mail address, and SubscriberType.\n\nExample\n\njulia> using RbO\n\njulia> scrooge = createSubscriber( \"Scrooge McDuck\", \"scrooge@duckcity.com\", PLOTTER )\nSubscriber(\"Scrooge McDuck\", \"scrooge@duckcity.com\", PLOTTER::SubscriberType = 2)\n\n\n\n\n\n","category":"function"},{"location":"#createPublisher-1","page":"User Manual","title":"createPublisher","text":"","category":"section"},{"location":"#","page":"User Manual","title":"User Manual","text":"createPublisher","category":"page"},{"location":"#RbO.createPublisher","page":"User Manual","title":"RbO.createPublisher","text":"createPublisher( name::String )::Publisher\n\nCreates a Publisher.\n\nExamples\n\njulia> using RbO\n\njulia> nyt = createPublisher(\"\")::Publisher\nERROR: MissingException: Publisher name is mandatory\n\njulia> nyt = createPublisher( \"The New York Times\" )\nPublisher(\"The New York Times\", NEWSPAPER::PublisherType = 0, Subscriber[])\n\n\n\n\n\ncreatePublisher( name::String, publishertype::PublisherType )::Publisher\n\nReturns a Publisher object.\n\njulia> using RbO\n\njulia> chronicals = createPublisher( \"the Duck Chronicals\", MAGAZINE )\nPublisher(\"the Duck Chronicals\", MAGAZINE::PublisherType = 1, Subscriber[])\n\n\n\n\n\n","category":"function"},{"location":"#subscribe-1","page":"User Manual","title":"subscribe","text":"","category":"section"},{"location":"#","page":"User Manual","title":"User Manual","text":"subscribe","category":"page"},{"location":"#RbO.subscribe","page":"User Manual","title":"RbO.subscribe","text":"subscribe( p::Publisher, s::Subscriber )::Publisher\n\nAdds a subscriber to the list with subscribers of a Publisher.\n\nExample\n\njulia> using RbO\n\njulia> daisy = createSubscriber( \"Daisy Mouse\", \"daisy@duckcity.com\" )\nSubscriber(\"Daisy Mouse\", \"daisy@duckcity.com\", MEAN_CALCULATOR::SubscriberType = 0)\n\njulia> scrooge = createSubscriber( \"Scrooge McDuck\", \"scrooge@duckcity.com\", PLOTTER )\nSubscriber(\"Scrooge McDuck\", \"scrooge@duckcity.com\", PLOTTER::SubscriberType = 2)\n\njulia> chronicals = createPublisher( \"the Duck Chronicals\", MAGAZINE )\nPublisher(\"the Duck Chronicals\", MAGAZINE::PublisherType = 1, Subscriber[])\n\njulia> subscribe( chronicals, daisy )\nPublisher(\"the Duck Chronicals\", MAGAZINE::PublisherType = 1, Subscriber[Subscriber(\"Daisy Mouse\", \"daisy@duckcity.com\", MEAN_CALCULATOR)])\n\njulia> subscribe( chronicals, scrooge )\nPublisher(\"the Duck Chronicals\", MAGAZINE::PublisherType = 1, Subscriber[Subscriber(\"Daisy Mouse\", \"daisy@duckcity.com\", MEAN_CALCULATOR), Subscriber(\"Scrooge McDuck\", \"scrooge@duckcity.com\", PLOTTER)])\n\n\n\n\n\n\n","category":"function"},{"location":"#unsubscribe-1","page":"User Manual","title":"unsubscribe","text":"","category":"section"},{"location":"#","page":"User Manual","title":"User Manual","text":"unsubscribe","category":"page"},{"location":"#RbO.unsubscribe","page":"User Manual","title":"RbO.unsubscribe","text":"unsubscribe( p::Publisher, s::Subscriber )::Publisher\n\nRemoves a subscriber from the list of subscribers of a Publisher,\n\nExample\n\njulia> using RbO\n\njulia> mickey = createSubscriber( \"Micky Mouse\" )\nSubscriber(\"Micky Mouse\", \"\", MEAN_CALCULATOR::SubscriberType = 0)\n\njulia> chronicals = createPublisher( \"the Duck Chronicals\", MAGAZINE )\nPublisher(\"the Duck Chronicals\", MAGAZINE::PublisherType = 1, Subscriber[])\n\njulia> subscribe( chronicals, mickey )\nPublisher(\"the Duck Chronicals\", MAGAZINE::PublisherType = 1, Subscriber[Subscriber(\"Micky Mouse\", \"\", MEAN_CALCULATOR)])\n\njulia> chronicals = unsubscribe( chronicals, mickey )\nPublisher(\"the Duck Chronicals\", MAGAZINE::PublisherType = 1, Subscriber[])\n\n\n\n\n\n","category":"function"},{"location":"#","page":"User Manual","title":"User Manual","text":"note: Note\nPublisher is an immutable object. 'unscubscribe' creates a new Publisher object, and is reassigned to the variable 'chronicals'.","category":"page"},{"location":"#createMessage-1","page":"User Manual","title":"createMessage","text":"","category":"section"},{"location":"#","page":"User Manual","title":"User Manual","text":"createMessage","category":"page"},{"location":"#RbO.createMessage","page":"User Manual","title":"RbO.createMessage","text":"createMessage(header::String, subject::String, body::Array{Float64, 1})::Message\n\nCreate a Message for the subscribers of a publisher.\n\nExample\n\njulia> using RbO\n\njulia> message = createMessage( \"Weather station\", \"Temperatures\", [10.9, 12, 10.5, 12.7, 10.2] )\nMessage(\"Weather station\", \"Temperatures\", [10.9, 12.0, 10.5, 12.7, 10.2])\n\n\n\n\n\n","category":"function"},{"location":"#sendMessage-1","page":"User Manual","title":"sendMessage","text":"","category":"section"},{"location":"#","page":"User Manual","title":"User Manual","text":"sendMessage","category":"page"},{"location":"#RbO.sendMessage","page":"User Manual","title":"RbO.sendMessage","text":"sendMessage( n::Publisher, m::Message, f::Function )\n\nNotifies subscribers\n\nExample\n\njulia> using RbO, Statistics\n\njulia> daisy = createSubscriber( \"Daisy Mouse\", \"daisy@duckcity.com\" )\nSubscriber(\"Daisy Mouse\", \"daisy@duckcity.com\", MEAN_CALCULATOR::SubscriberType = 0)\n\njulia> scrooge = createSubscriber( \"Scrooge McDuck\", \"scrooge@duckcity.com\", PLOTTER )\nSubscriber(\"Scrooge McDuck\", \"scrooge@duckcity.com\", PLOTTER::SubscriberType = 2)\n\njulia> chronicals = createPublisher( \"the Duck Chronicals\", MAGAZINE )\nPublisher(\"the Duck Chronicals\", MAGAZINE::PublisherType = 1, Subscriber[])\n\njulia> subscribe( chronicals, daisy )\nPublisher(\"the Duck Chronicals\", MAGAZINE::PublisherType = 1, Subscriber[Subscriber(\"Daisy Mouse\", \"daisy@duckcity.com\", MEAN_CALCULATOR)])\n\njulia> subscribe( chronicals, scrooge )\nPublisher(\"the Duck Chronicals\", MAGAZINE::PublisherType = 1, Subscriber[Subscriber(\"Daisy Mouse\", \"daisy@duckcity.com\", MEAN_CALCULATOR), Subscriber(\"Scrooge McDuck\", \"scrooge@duckcity.com\", PLOTTER)])\n\njulia> message = createMessage( \"Weather station\", \"Temperatures\", [10.9, 12, 10.5, 12.7, 10.2] )\nMessage(\"Weather station\", \"Temperatures\", [10.9, 12.0, 10.5, 12.7, 10.2])\n\njulia> result = []\n0-element Array{Any,1}\n\njulia> processMessage( s::Subscriber, n::Publisher, m::Message ) = begin\n           if s.subscribertype == STD_CALCULATOR\n               println( s.name * \": the standard deviation of the last five temperatures is: \" * string( round( std(m.body); digits=2) ) * \" °C\" )\n           elseif s.subscribertype == MEAN_CALCULATOR\n               println( s.name * \": the average of the last five temperatures is: \" * string( mean( m.body ) ) * \" °C\" )\n           elseif s.subscribertype == PLOTTER\n               println( s.name * \": the dataset with the last five temperatures is: \" * string( m.body ) )\n               global result = m.body\n           end\n       end\nprocessMessage (generic function with 1 method)\n\njulia> sendMessage( chronicals, message, processMessage )\nDaisy Mouse: the average of the last five temperatures is: 11.26 °C\nScrooge McDuck: the dataset with the last five temperatures is: [10.9, 12.0, 10.5, 12.7, 10.2]\n\n\n\n\n\n","category":"function"},{"location":"#Domain-Items-1","page":"User Manual","title":"Domain Items","text":"","category":"section"},{"location":"#Subscriber-1","page":"User Manual","title":"Subscriber","text":"","category":"section"},{"location":"#","page":"User Manual","title":"User Manual","text":"Subscriber","category":"page"},{"location":"#RbO.Subscriber","page":"User Manual","title":"RbO.Subscriber","text":"struct Subscriber\n\nReturns a Subscriber. It is preferred to use createSubscriber.\n\nExample\n\njulia> using RbO\n\njulia> daisy = Subscriber(\"Daisy\")\nSubscriber(\"Daisy\", \"\", MEAN_CALCULATOR::SubscriberType = 0)\n\n\n\n\n\n","category":"type"},{"location":"#SubscriberType-1","page":"User Manual","title":"SubscriberType","text":"","category":"section"},{"location":"#","page":"User Manual","title":"User Manual","text":"SubscriberType","category":"page"},{"location":"#RbO.SubscriberType","page":"User Manual","title":"RbO.SubscriberType","text":"SubscriberType\n\nValues\n\nSTD_CALCULATOR (caluclates the standard deviation of set of data, default value)\nMEAN_CALCULATOR (caluclates the mean of set of data)\nPLOTTER (keeps the dataset for plotting)\n\n\n\n\n\n","category":"type"},{"location":"#Publisher-1","page":"User Manual","title":"Publisher","text":"","category":"section"},{"location":"#","page":"User Manual","title":"User Manual","text":"Publisher","category":"page"},{"location":"#RbO.Publisher","page":"User Manual","title":"RbO.Publisher","text":"struct Publisher\n\nReturns a Publisher object.  It is preferred to use createPublisher.\n\nExample\n\njulia> using RbO\n\njulia> chronicals = Publisher(\"The Duck City Chornicals\", NEWSPAPER, Subscriber[])\nPublisher(\"The Duck City Chornicals\", NEWSPAPER::PublisherType = 0, Subscriber[])\n\n\n\n\n\n","category":"type"},{"location":"#PublisherType-1","page":"User Manual","title":"PublisherType","text":"","category":"section"},{"location":"#","page":"User Manual","title":"User Manual","text":"PublisherType","category":"page"},{"location":"#RbO.PublisherType","page":"User Manual","title":"RbO.PublisherType","text":"PublisherType\n\nValues\n\nNEWSPAPER\nMAGAZINE\nSOCIAL_MEDIA\n\n\n\n\n\n","category":"type"},{"location":"#Message-1","page":"User Manual","title":"Message","text":"","category":"section"},{"location":"#","page":"User Manual","title":"User Manual","text":"Message","category":"page"},{"location":"#RbO.Message","page":"User Manual","title":"RbO.Message","text":"struct Message\n\nReturms a Message object.  It is preferred to use createMessage.\n\nExample\n\njulia> using RbO\n\njulia> message = Message( \"Weather station\", \"Temperatures\", [10.9, 12, 10.5, 12.7, 10.2] )\nMessage(\"Weather station\", \"Temperatures\", [10.9, 12.0, 10.5, 12.7, 10.2])\n\n\n\n\n\n\n","category":"type"},{"location":"#Examples-1","page":"User Manual","title":"Examples","text":"","category":"section"},{"location":"#test.jl-1","page":"User Manual","title":"test.jl","text":"","category":"section"},{"location":"#","page":"User Manual","title":"User Manual","text":"Code to test RbO","category":"page"},{"location":"#","page":"User Manual","title":"User Manual","text":"using RbO, Plots, Statistics\npyplot()\n\n# ### Create subscribers\ndaisy = createSubscriber( \"Daisy Duck\", \"daisy@duckcity.com\" )\ndonald = createSubscriber( \"Donald Duck\", \"donald@duckcity.com\", STD_CALCULATOR )\nscrooge = createSubscriber( \"Scrooge McDuck\", \"scrooge@duckcity.com\", PLOTTER )\nmickey = createSubscriber( \"Micky Mouse\" )\n\n# ### Create newspapers and magazines\nchronicals = createPublisher( \"the Duck Chronicals\" )\n\n# Add subscribers to the Duck Chronicals\nsubscribe( chronicals, daisy )\nsubscribe( chronicals, donald )\nsubscribe( chronicals, scrooge )\nsubscribe( chronicals, mickey )\n\n# Unsubscribe Mickey Mouse\nchronicals = unsubscribe(chronicals, mickey)\n\n# ### Define message for the Duck Chronical subscribers\nmessage = createMessage( \"Weather station\", \"Temperatures\", [10.9, 12, 10.5, 12.7, 10.2] )\n\n# ### Print the messages\npaper = chronicals\n\n# List with the subscribers of a newspaper or magazine\nsm = map( x -> x.email == \"\" ? x.name : x.name * \" - \" * x.email, paper.list )\n\n# Print the subscribers\nlen =  length( \"Subscribers of \" * paper.name * string(paper.publishertype )) + 5\n\nprintln( \"\\n\" * \"=\"^len )\ntitle = titlecase( string( paper.publishertype ) )\nprintln( \" Subscribers of \" * paper.name * \" - \" * map(x -> x == '_' ? ' ' : x , title ) )\nprintln( \"=\"^len )\nfor subscriber in sm\n    println( \" \" * subscriber )\nend\nprintln( '='^len )\n\n# ### Define the function 'processMessage' to process data depending on SubsriberType\n#result = []\nprocessMessage( s::Subscriber, n::Publisher, m::Message ) = begin\n    if s.subscribertype == STD_CALCULATOR\n        println( s.name * \":\\t the standard deviation of the last five temperatures is: \" * string( round( std(m.body); digits=2) ) * \" °C\" )\n    elseif s.subscribertype == MEAN_CALCULATOR\n        #println( s.name * \":\\t the average of the last five temperatures is: \" * string(sum(m.body) / length(m.body)) * \" °C\" )\n        println( s.name * \":\\t the average of the last five temperatures is: \" * string( mean( m.body ) ) * \" °C\" )\n    elseif s.subscribertype == PLOTTER\n        println( s.name * \":\\t the dataset with the last five temperatures is: \" * string( m.body ) )\n        global result = m.body\n    end\nend\n\n# ### Notify scubscribers\nsendMessage( chronicals, message, processMessage )\n\n# ### Plot data\nplot( result )\n","category":"page"},{"location":"#make.jl-1","page":"User Manual","title":"make.jl","text":"","category":"section"},{"location":"#","page":"User Manual","title":"User Manual","text":"using Documenter\nusing RbO, Statistics\nusing Test\n\ndoctest(RbO)\n\nmakedocs(\n    sitename = \"RbO\",\n    format = Documenter.HTML(),\n    modules = [RbO],\n    pages = [\n        \"User Manual\" => \"index.md\",\n        \"Building applications with Julia\" => \"course.md\"\n    ]\n)","category":"page"},{"location":"#doc.jl-1","page":"User Manual","title":"doc.jl","text":"","category":"section"},{"location":"#","page":"User Manual","title":"User Manual","text":"Code to create the Julia Notebook","category":"page"},{"location":"#","page":"User Manual","title":"User Manual","text":"# Uncomment the next line when RbO has been cloned.\n#push!(LOAD_PATH, \"/home/rob/julia_projects/RbO.jl/src/\")\ninclude(\"./test.jl\")\nusing Literate\nLiterate.notebook(\"./test.jl\", \".\"; documenter=false)","category":"page"},{"location":"#Julia-Notebook-1","page":"User Manual","title":"Julia Notebook","text":"","category":"section"},{"location":"#","page":"User Manual","title":"User Manual","text":"You can find an example of the code in a Julia Notebook on GitHub. See: https://github.com/rbontekoe/RbO.jl/blob/master/test.ipynb","category":"page"},{"location":"#References-1","page":"User Manual","title":"References","text":"","category":"section"},{"location":"#","page":"User Manual","title":"User Manual","text":"Parallel & Distributed Computing","category":"page"}]
}
